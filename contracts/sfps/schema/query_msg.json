{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "max_interval"
      ],
      "properties": {
        "max_interval": {
          "type": "object"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "current_highest_header_hash"
      ],
      "properties": {
        "current_highest_header_hash": {
          "type": "object"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "hash_list_length"
      ],
      "properties": {
        "hash_list_length": {
          "type": "object"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "hash_by_index"
      ],
      "properties": {
        "hash_by_index": {
          "type": "object",
          "required": [
            "index"
          ],
          "properties": {
            "index": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "verify_response_deliver_tx_proof"
      ],
      "properties": {
        "verify_response_deliver_tx_proof": {
          "type": "object",
          "required": [
            "block_hash_index",
            "encryption_key",
            "headers",
            "merkle_proof"
          ],
          "properties": {
            "block_hash_index": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "encryption_key": {
              "$ref": "#/definitions/Binary"
            },
            "headers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "merkle_proof": {
              "$ref": "#/definitions/MerkleProof"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "verify_subsequent_light_blocks"
      ],
      "properties": {
        "verify_subsequent_light_blocks": {
          "type": "object",
          "required": [
            "anchor_header",
            "anchor_header_index",
            "commit_flags",
            "following_light_blocks"
          ],
          "properties": {
            "anchor_header": {
              "type": "string"
            },
            "anchor_header_index": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "commit_flags": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            },
            "following_light_blocks": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "MerkleProof": {
      "type": "object",
      "required": [
        "aunts",
        "index",
        "leaf",
        "total"
      ],
      "properties": {
        "aunts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "leaf": {
          "type": "string"
        },
        "total": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    }
  }
}
