{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "block_header"
      ],
      "properties": {
        "block_header": {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "best_header_hash"
      ],
      "properties": {
        "best_header_hash": {
          "type": "object"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "verify_merkle_proof"
      ],
      "properties": {
        "verify_merkle_proof": {
          "type": "object",
          "required": [
            "height",
            "merkle_proof",
            "tx"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "merkle_proof": {
              "$ref": "#/definitions/MerkleProofMsg"
            },
            "tx": {
              "$ref": "#/definitions/Binary"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object"
        }
      }
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "MerkleProofMsg": {
      "type": "object",
      "required": [
        "prefix",
        "siblings"
      ],
      "properties": {
        "prefix": {
          "type": "array",
          "items": {
            "type": "boolean"
          }
        },
        "siblings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}
